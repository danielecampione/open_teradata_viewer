/* Generated By:JavaCC: Do not edit this line. CCSqlParserTokenManager.java */
/*
 * Open Teradata Viewer ( sql parser )
 * Copyright (C) 2015, D. Campione
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package net.sourceforge.open_teradata_viewer.sqlparser.parser;
import net.sourceforge.open_teradata_viewer.sqlparser.expression.*;
import net.sourceforge.open_teradata_viewer.sqlparser.expression.operators.arithmetic.*;
import net.sourceforge.open_teradata_viewer.sqlparser.expression.operators.conditional.*;
import net.sourceforge.open_teradata_viewer.sqlparser.expression.operators.relational.*;
import net.sourceforge.open_teradata_viewer.sqlparser.schema.*;
import net.sourceforge.open_teradata_viewer.sqlparser.statement.*;
import net.sourceforge.open_teradata_viewer.sqlparser.statement.alter.*;
import net.sourceforge.open_teradata_viewer.sqlparser.statement.create.index.*;
import net.sourceforge.open_teradata_viewer.sqlparser.statement.create.table.*;
import net.sourceforge.open_teradata_viewer.sqlparser.statement.create.view.*;
import net.sourceforge.open_teradata_viewer.sqlparser.statement.delete.*;
import net.sourceforge.open_teradata_viewer.sqlparser.statement.drop.*;
import net.sourceforge.open_teradata_viewer.sqlparser.statement.insert.*;
import net.sourceforge.open_teradata_viewer.sqlparser.statement.replace.*;
import net.sourceforge.open_teradata_viewer.sqlparser.statement.execute.*;
import net.sourceforge.open_teradata_viewer.sqlparser.statement.select.*;
import net.sourceforge.open_teradata_viewer.sqlparser.statement.truncate.*;
import net.sourceforge.open_teradata_viewer.sqlparser.statement.update.*;
import java.util.*;

/** Token Manager. */
public class CCSqlParserTokenManager implements CCSqlParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xffffffffffffffe0L) != 0L || (active1 & 0x3ffffffffffffffL) != 0L)
         {
            jjmatchedKind = 127;
            return 44;
         }
         if ((active2 & 0x20000000L) != 0L)
            return 8;
         if ((active2 & 0x800L) != 0L)
            return 1;
         if ((active2 & 0x8010000000L) != 0L)
            return 5;
         if ((active2 & 0x20000000000L) != 0L)
            return 29;
         return -1;
      case 1:
         if ((active0 & 0x6fb3ffffff7bf000L) != 0L || (active1 & 0x2bbfffffffbfdffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 127;
               jjmatchedPos = 1;
            }
            return 44;
         }
         if ((active0 & 0x904c000000840fe0L) != 0L || (active1 & 0x144000000040200L) != 0L)
            return 44;
         return -1;
      case 2:
         if ((active0 & 0xffffd7ffffd00000L) != 0L || (active1 & 0x2bffdf7bff7ffffL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 127;
               jjmatchedPos = 2;
            }
            return 44;
         }
         if ((active0 & 0x2800002ff000L) != 0L || (active1 & 0x20840080000L) != 0L)
            return 44;
         return -1;
      case 3:
         if ((active0 & 0xffffd50044100000L) != 0L || (active1 & 0x993df2bfffdbffL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 127;
               jjmatchedPos = 3;
            }
            return 44;
         }
         if ((active0 & 0x2ffbbc00000L) != 0L || (active1 & 0x226c00d00002400L) != 0L)
            return 44;
         return -1;
      case 4:
         if ((active0 & 0xfe00000000100000L) != 0L || (active1 & 0xb8bde09affcbfdL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 127;
               jjmatchedPos = 4;
            }
            return 44;
         }
         if ((active0 & 0x1ffd50044000000L) != 0L || (active1 & 0x1001325001002L) != 0L)
            return 44;
         return -1;
      case 5:
         if ((active0 & 0x100000L) != 0L || (active1 & 0x80a5e01affc3f8L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 5;
            return 44;
         }
         if ((active0 & 0xfe00000000000000L) != 0L || (active1 & 0x38180080000807L) != 0L)
            return 44;
         return -1;
      case 6:
         if ((active1 & 0x8024e010764380L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 6;
            return 44;
         }
         if ((active0 & 0x100000L) != 0L || (active1 & 0x81000a898078L) != 0L)
            return 44;
         return -1;
      case 7:
         if ((active1 & 0x8004e000724200L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 7;
            return 44;
         }
         if ((active1 & 0x200010040180L) != 0L)
            return 44;
         return -1;
      case 8:
         if ((active1 & 0x320000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 8;
            return 44;
         }
         if ((active1 & 0x8004e000404200L) != 0L)
            return 44;
         return -1;
      case 9:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 9;
            return 44;
         }
         if ((active1 & 0x300000L) != 0L)
            return 44;
         return -1;
      case 10:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 127;
            jjmatchedPos = 10;
            return 44;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1880000L);
      case 37:
         return jjStopAtPos(0, 158);
      case 38:
         return jjStopAtPos(0, 155);
      case 40:
         return jjStopAtPos(0, 136);
      case 41:
         return jjStopAtPos(0, 137);
      case 42:
         return jjStopAtPos(0, 138);
      case 43:
         return jjStopAtPos(0, 141);
      case 44:
         return jjStopAtPos(0, 135);
      case 45:
         jjmatchedKind = 156;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000000000L);
      case 46:
         return jjStartNfaWithStates_0(0, 139, 1);
      case 47:
         return jjStartNfaWithStates_0(0, 157, 8);
      case 58:
         jjmatchedKind = 165;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1000000000L);
      case 59:
         return jjStopAtPos(0, 133);
      case 60:
         jjmatchedKind = 143;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x60000L);
      case 61:
         return jjStopAtPos(0, 134);
      case 62:
         jjmatchedKind = 142;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x10000L);
      case 63:
         return jjStopAtPos(0, 140);
      case 64:
         jjmatchedKind = 166;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100000L);
      case 91:
         return jjStartNfaWithStates_0(0, 169, 29);
      case 93:
         return jjStopAtPos(0, 170);
      case 94:
         return jjStopAtPos(0, 159);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x47020L, 0x60000000L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x2000000000040L, 0x80000000040L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x400000240000000L, 0x8010082500400L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x200000008400080L, 0x100L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x2000001000200000L, 0xc00000008804L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x84080000000L, 0x1008200080000L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x0L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x800c000004800300L, 0x40000000040200L, 0x0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L, 0x0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x8000L, 0x200000000000000L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x10000022000000L, 0x400010000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x21000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x1010000L, 0x2000108000010L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x1060000100000c00L, 0x104000000002000L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x100000100000L, 0x4004004008L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x80161800200020L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x800002000020000L, 0x11000000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x10800080000L, 0x80L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0xc00000000000L, 0x10202000000001L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x100020000000000L, 0x800002L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x48400000000L, 0x20000000000000L, 0x0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L, 0x0L);
      case 123:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x10d00000000L);
      case 124:
         jjmatchedKind = 154;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2000000L);
      case 125:
         return jjStopAtPos(0, 161);
      case 126:
         jjmatchedKind = 149;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x400000L);
      default :
         return jjMoveNfa_0(7, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active2 & 0x400000L) != 0L)
            return jjStopAtPos(1, 150);
         break;
      case 58:
         if ((active2 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 164);
         break;
      case 61:
         if ((active2 & 0x10000L) != 0L)
            return jjStopAtPos(1, 144);
         else if ((active2 & 0x20000L) != 0L)
            return jjStopAtPos(1, 145);
         else if ((active2 & 0x80000L) != 0L)
            return jjStopAtPos(1, 147);
         break;
      case 62:
         if ((active2 & 0x40000L) != 0L)
            return jjStopAtPos(1, 146);
         else if ((active2 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 167);
         break;
      case 64:
         if ((active2 & 0x100000L) != 0L)
            return jjStopAtPos(1, 148);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x4100010200000000L, active1, 0x1400834412L, active2, 0L);
      case 68:
      case 100:
         if ((active2 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 160);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xa02000020528000L, active1, 0x283140000200060L, active2, 0L);
      case 70:
      case 102:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 118, 44);
         else if ((active1 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0L, active2, 0x10000000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x40c00000000L, active1, 0x400000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x90128002000000L, active1, 0x20080210001100L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x1004001000L, active1, 0x20000000L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L, active1, 0L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x800c800000a06000L, active1, 0x14202000040200L, active2, 0L);
      case 79:
      case 111:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(1, 7, 44);
         return jjMoveStringLiteralDfa2_0(active0, 0x82010090000L, active1, 0x802888a180000L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0x1L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4410000c8000000L, active1, 0x4004000088L, active2, 0L);
      case 83:
      case 115:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 8, 44);
         return jjMoveStringLiteralDfa2_0(active0, 0x400000040000L, active1, 0x4L, active2, 0L);
      case 84:
      case 116:
         if ((active2 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 162;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000L, active2, 0x800000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x20004001000000L, active1, 0x10100000000L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000000L, active1, 0xc00000008800L, active2, 0L);
      case 89:
      case 121:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(1, 6, 44);
         break;
      case 124:
         if ((active2 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 153);
         break;
      case 126:
         if ((active2 & 0x800000L) != 0L)
         {
            jjmatchedKind = 151;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 42:
         if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(2, 152);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1400000L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0x2010000000L, active2, 0L);
      case 67:
      case 99:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 18, 44);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000008000804L, active2, 0L);
      case 68:
      case 100:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 13, 44);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 21, 44);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 94, 44);
         return jjMoveStringLiteralDfa3_0(active0, 0x44000000000000L, active1, 0x1L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x400060d00000000L, active1, 0x200c04000002000L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000020000000L, active1, 0x200000L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x82000000000000L, active1, 0x100000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000c00014000000L, active1, 0x10000004000008L, active2, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L, active1, 0L, active2, 0L);
      case 76:
      case 108:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 12, 44);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 45, 44);
         return jjMoveStringLiteralDfa3_0(active0, 0xb00004001000000L, active1, 0x4208180000002L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x10002000000000L, active1, 0x8000000000000L, active2, 0L);
      case 78:
      case 110:
         if ((active2 & 0x10000000000L) != 0L)
            return jjStopAtPos(2, 168);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000L, active1, 0x81002101000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000c8000000L, active1, 0L, active2, 0L);
      case 80:
      case 112:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 19, 44);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L, active1, 0x10200884000L, active2, 0L);
      case 83:
      case 115:
         if ((active2 & 0x800000000L) != 0L)
            return jjStopAtPos(2, 163);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000001200400000L, active1, 0x400000500L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 16, 44);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 17, 44);
         return jjMoveStringLiteralDfa3_0(active0, 0x20008000800000L, active1, 0x21040020078250L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000100000000000L, active1, 0L, active2, 0L);
      case 87:
      case 119:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000000L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000000L, active2, 0L);
      case 89:
      case 121:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 14, 44);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 15, 44);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0x80000000005L);
      case 67:
      case 99:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 44);
         else if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L, active1, 0x1804000000000L);
      case 69:
      case 101:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 44);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 44);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 44);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 37, 44);
         return jjMoveStringLiteralDfa4_0(active0, 0x8a6c000000000000L, active1, 0x1000202f0a00L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000000L);
      case 72:
      case 104:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000000L, active1, 0x20000000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x4012000000000000L, active1, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L, active1, 0L);
      case 76:
      case 108:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 44);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L, active1, 0x8110000020L);
      case 77:
      case 109:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 44);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000000008L);
      case 78:
      case 110:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 44);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 44);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 44);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 44);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0x2000080L);
      case 79:
      case 111:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 44);
         return jjMoveStringLiteralDfa4_0(active0, 0x900000000000L, active1, 0x202004000000L);
      case 80:
      case 112:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 44);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 121, 44);
         break;
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000000000000L);
      case 82:
      case 114:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 77, 44);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0x10001408000L);
      case 83:
      case 115:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 99, 44);
         return jjMoveStringLiteralDfa4_0(active0, 0x3000000040000000L, active1, 0x200100000L);
      case 84:
      case 116:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 44);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 74, 44);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 98, 44);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 113, 44);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4100L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x101000000000000L, active1, 0x80040080001012L);
      case 87:
      case 119:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 44);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40L);
      case 89:
      case 121:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 114, 44);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8800000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x408028L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0x8000080L);
      case 69:
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 26, 44);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 44);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 42, 44);
         else if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 100, 44);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000100000L, active1, 0x14002000042L);
      case 71:
      case 103:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 46, 44);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000000000L);
      case 72:
      case 104:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 112, 44);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x28000010884100L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000000L);
      case 78:
      case 110:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 44);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 49, 44);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000000000L);
      case 80:
      case 112:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 44);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x804L);
      case 82:
      case 114:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 51, 44);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 53, 44);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 54, 44);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 90, 44);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 93, 44);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0x800c0000270210L);
      case 83:
      case 115:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 44);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 76, 44);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 96, 44);
         break;
      case 84:
      case 116:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 44, 44);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 52, 44);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 55, 44);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 88, 44);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 97, 44);
         return jjMoveStringLiteralDfa5_0(active0, 0x2600000000000000L, active1, 0x100001L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10802000000000L);
      case 88:
      case 120:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 50, 44);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10090L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2408020L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000000000L);
      case 69:
      case 101:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 57, 44);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 58, 44);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 64, 44);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(5, 66, 44);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 116, 44);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200040L);
      case 71:
      case 103:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 62, 44);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000080000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000L);
      case 78:
      case 110:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 95, 44);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 117, 44);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L, active1, 0x52010800100L);
      case 80:
      case 112:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 108, 44);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100008L);
      case 83:
      case 115:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 61, 44);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 65, 44);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000000000200L);
      case 84:
      case 116:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 59, 44);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 60, 44);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 63, 44);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 75, 44);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 115, 44);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000004000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000000000L);
      case 89:
      case 121:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 107, 44);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x160000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000000L);
      case 69:
      case 101:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 69, 44);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 91, 44);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 111, 44);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000000200L);
      case 71:
      case 103:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 87, 44);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8004c000004000L);
      case 76:
      case 108:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 68, 44);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 80, 44);
         break;
      case 78:
      case 110:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 70, 44);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 83, 44);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000L);
      case 84:
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 20, 44);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 79, 44);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 89, 44);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 104, 44);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400080L);
      case 89:
      case 121:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 67, 44);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, 0L, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active1, 0x200200L);
      case 68:
      case 100:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 109, 44);
         break;
      case 69:
      case 101:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(7, 71, 44);
         return jjMoveStringLiteralDfa8_0(active1, 0x2000400000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active1, 0x100000L);
      case 76:
      case 108:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 82, 44);
         return jjMoveStringLiteralDfa8_0(active1, 0x20000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active1, 0x4c000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active1, 0x4000L);
      case 83:
      case 115:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(7, 92, 44);
         break;
      case 84:
      case 116:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 72, 44);
         break;
      case 86:
      case 118:
         return jjMoveStringLiteralDfa8_0(active1, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(6, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, 0L, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 101, 44);
         break;
      case 69:
      case 101:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 119, 44);
         return jjMoveStringLiteralDfa9_0(active1, 0x200000L);
      case 71:
      case 103:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 102, 44);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 103, 44);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 106, 44);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active1, 0x20000L);
      case 78:
      case 110:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(8, 78, 44);
         return jjMoveStringLiteralDfa9_0(active1, 0x100000L);
      case 82:
      case 114:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(8, 86, 44);
         break;
      case 84:
      case 116:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(8, 73, 44);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(7, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, 0L, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 83:
      case 115:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(9, 85, 44);
         break;
      case 84:
      case 116:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(9, 84, 44);
         break;
      case 90:
      case 122:
         return jjMoveStringLiteralDfa10_0(active1, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(8, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(8, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, 0L, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active1, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(9, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(9, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, 0L, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(11, 81, 44);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, 0L, active1, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x0L, 0x0L, 0x0L, 0x1040001090400010L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 44;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAddStates(0, 6);
                  }
                  else if (curChar == 34)
                     jjCheckNAdd(23);
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(18, 19);
                  else if (curChar == 36)
                  {
                     if (kind > 127)
                        kind = 127;
                     jjCheckNAddTwoStates(15, 16);
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 5;
                  else if (curChar == 46)
                     jjCheckNAdd(1);
                  break;
               case 44:
                  if ((0x3ff001800000000L & l) != 0L)
                  {
                     if (kind > 127)
                        kind = 127;
                     jjCheckNAdd(16);
                  }
                  if (curChar == 36)
                  {
                     if (kind > 127)
                        kind = 127;
                     jjCheckNAddTwoStates(15, 16);
                  }
                  break;
               case 0:
                  if (curChar == 46)
                     jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 122)
                     kind = 122;
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 3:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 122)
                     kind = 122;
                  jjCheckNAdd(4);
                  break;
               case 5:
                  if (curChar != 45)
                     break;
                  if (kind > 125)
                     kind = 125;
                  jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 125)
                     kind = 125;
                  jjCheckNAdd(6);
                  break;
               case 8:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 9:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 10:
                  if (curChar == 42)
                     jjCheckNAddStates(7, 9);
                  break;
               case 11:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(12, 10);
                  break;
               case 12:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(12, 10);
                  break;
               case 13:
                  if (curChar == 47 && kind > 126)
                     kind = 126;
                  break;
               case 14:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 15:
                  if (curChar != 36)
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjCheckNAddTwoStates(15, 16);
                  break;
               case 16:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjCheckNAdd(16);
                  break;
               case 17:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 18:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 19:
                  if (curChar != 39)
                     break;
                  if (kind > 130)
                     kind = 130;
                  jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(21, 19);
                  break;
               case 21:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(21, 19);
                  break;
               case 22:
                  if (curChar == 34)
                     jjCheckNAdd(23);
                  break;
               case 23:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 24:
                  if (curChar == 34 && kind > 131)
                     kind = 131;
                  break;
               case 26:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjAddStates(10, 11);
                  break;
               case 29:
                  if ((0xfc00ffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(30, 31);
                  break;
               case 30:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(30, 31);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAddStates(0, 6);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(33, 0);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 35:
                  if (curChar != 46)
                     break;
                  if (kind > 122)
                     kind = 122;
                  jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 37:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(38);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 122)
                     kind = 122;
                  jjCheckNAdd(38);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(39, 40);
                  break;
               case 41:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(42);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 122)
                     kind = 122;
                  jjCheckNAdd(42);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(43);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 127)
                        kind = 127;
                     jjCheckNAddTwoStates(15, 16);
                  }
                  else if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 29;
                  else if (curChar == 96)
                     jjCheckNAdd(26);
                  break;
               case 44:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 127)
                        kind = 127;
                     jjCheckNAdd(16);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 127)
                        kind = 127;
                     jjCheckNAddTwoStates(15, 16);
                  }
                  break;
               case 2:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(12, 13);
                  break;
               case 6:
                  if (kind > 125)
                     kind = 125;
                  jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 9:
                  jjCheckNAddTwoStates(9, 10);
                  break;
               case 11:
               case 12:
                  jjCheckNAddTwoStates(12, 10);
                  break;
               case 15:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjCheckNAddTwoStates(15, 16);
                  break;
               case 16:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjCheckNAdd(16);
                  break;
               case 18:
                  jjCheckNAddTwoStates(18, 19);
                  break;
               case 21:
                  jjCheckNAddTwoStates(21, 19);
                  break;
               case 23:
                  jjAddStates(14, 15);
                  break;
               case 25:
                  if (curChar == 96)
                     jjCheckNAdd(26);
                  break;
               case 26:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(26, 27);
                  break;
               case 27:
                  if (curChar == 96 && kind > 131)
                     kind = 131;
                  break;
               case 28:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
               case 30:
                  if ((0xffffffffdfffffffL & l) != 0L)
                     jjCheckNAddTwoStates(30, 31);
                  break;
               case 31:
                  if (curChar == 93 && kind > 131)
                     kind = 131;
                  break;
               case 36:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(16, 17);
                  break;
               case 40:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(18, 19);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 7:
               case 15:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjCheckNAddTwoStates(15, 16);
                  break;
               case 44:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 127)
                        kind = 127;
                     jjCheckNAddTwoStates(15, 16);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 127)
                        kind = 127;
                     jjCheckNAdd(16);
                  }
                  break;
               case 6:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 125)
                     kind = 125;
                  jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 9:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 11:
               case 12:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(12, 10);
                  break;
               case 16:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjCheckNAdd(16);
                  break;
               case 18:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 21:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(21, 19);
                  break;
               case 23:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(14, 15);
                  break;
               case 26:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(10, 11);
                  break;
               case 29:
               case 30:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(30, 31);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 44 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   33, 0, 34, 35, 39, 40, 43, 10, 11, 13, 26, 27, 3, 4, 23, 24, 
   37, 38, 41, 42, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec3[i2] & l2) != 0L);
      default :
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, "\73", "\75", "\54", "\50", "\51", 
"\52", "\56", "\77", "\53", "\76", "\74", "\76\75", "\74\75", "\74\76", "\41\75", 
"\100\100", "\176", "\176\52", "\41\176", "\41\176\52", "\174\174", "\174", "\46", "\55", 
"\57", "\45", "\136", null, "\175", null, null, "\72\72", "\72", "\100", "\55\76", 
null, "\133", "\135", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0x8fffffffffffffffL, 0x7ffffffffecL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x6000000000000000L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x6000000000000000L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[44];
private final int[] jjstateSet = new int[88];
protected char curChar;
/** Constructor. */
public CCSqlParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public CCSqlParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 44; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
